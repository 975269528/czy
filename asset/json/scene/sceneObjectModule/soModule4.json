{
    "preLayer": [],
    "varAttributes": [
        {
            "id": "184977816669_0.9155437196142784",
            "varName": "type",
            "varType": 0,
            "compData": {
                "compType": 2,
                "compParam": {
                    "items": "矩形,圆形,自定义形状",
                    "showIndex": false
                }
            },
            "defaultValue": "",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "自定义形状的节点按住Shift可仅限水平或垂直移动",
            "alias": "范围形状",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.5685833703558165",
            "varName": "color",
            "varType": 1,
            "compData": {
                "compType": 12,
                "compParam": {}
            },
            "defaultValue": "#ff0000",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "编辑器预览-颜色",
            "alias": "颜色",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.1215469115162735",
            "varName": "opacity",
            "varType": 0,
            "compData": {
                "compType": 1,
                "compParam": {
                    "lowerLimit": 0,
                    "upperLimit": 1,
                    "stepValue": 0.01,
                    "limitInteger": false,
                    "lockTextLimit": true,
                    "xDragEnabled": true,
                    "yDragEnabled": true,
                    "minLimit": 0,
                    "maxLimit": 1,
                    "tickValue": 0.01
                }
            },
            "defaultValue": "0.5",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "编辑器预览-透明度",
            "alias": "不透明度",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.648709912090466",
            "varName": "layer",
            "varType": 0,
            "compData": {
                "compType": 2,
                "compParam": {
                    "items": "位于行走图下方,位于行走图上方",
                    "showIndex": false
                }
            },
            "defaultValue": "0",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "编辑器预览-显示层次",
            "alias": "层次",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.8154631153702558",
            "varName": "hideAvatar",
            "varType": 2,
            "compData": {
                "compType": 15,
                "compParam": {}
            },
            "defaultValue": "0",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "",
            "alias": "隐藏行走图",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.9025710308291435",
            "varName": "alwaysDisplayColor",
            "varType": 2,
            "compData": {
                "compType": 15,
                "compParam": {}
            },
            "defaultValue": "1",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "编辑器预览-始终显示范围区域",
            "alias": "始终显示范围区域",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.5562120348607162",
            "varName": "width",
            "varType": 0,
            "compData": {
                "compType": 0,
                "compParam": {
                    "lowerLimit": 1,
                    "upperLimit": 20000,
                    "stepValue": 1,
                    "limitInteger": true,
                    "lockTextLimit": true,
                    "xDragEnabled": true,
                    "yDragEnabled": true
                }
            },
            "defaultValue": "48",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "单位：像素",
            "alias": "宽度",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.940134477688161",
            "varName": "height",
            "varType": 0,
            "compData": {
                "compType": 0,
                "compParam": {
                    "lowerLimit": 1,
                    "upperLimit": 20000,
                    "stepValue": 1,
                    "limitInteger": true,
                    "lockTextLimit": true,
                    "xDragEnabled": true,
                    "yDragEnabled": true
                }
            },
            "defaultValue": "48",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "单位：像素",
            "alias": "高度",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.7376267621774175",
            "varName": "offsetX",
            "varType": 0,
            "compData": {
                "compType": 0,
                "compParam": {}
            },
            "defaultValue": "-24",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "单位：像素",
            "alias": "偏移X",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.6071494627244578",
            "varName": "offsetY",
            "varType": 0,
            "compData": {
                "compType": 0,
                "compParam": {}
            },
            "defaultValue": "-24",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "单位：像素",
            "alias": "偏移Y",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.4595723534542162",
            "varName": "radius",
            "varType": 0,
            "compData": {
                "compType": 0,
                "compParam": {
                    "lowerLimit": 1,
                    "upperLimit": 20000,
                    "stepValue": 1,
                    "limitInteger": true,
                    "lockTextLimit": true,
                    "xDragEnabled": true,
                    "yDragEnabled": true
                }
            },
            "defaultValue": "24",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "单位：像素",
            "alias": "半径",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.002201906566537959",
            "varName": "pointArr",
            "varType": 3,
            "compData": {
                "compType": 1003,
                "compParam": {}
            },
            "defaultValue": "",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 4,
            "arrayMode": true,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "自定义点最终与对象坐标点形成闭环形状",
            "alias": "形状-点集合",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        },
        {
            "id": "184977816669_0.3057248869245339",
            "varName": "tips",
            "varType": 1,
            "compData": {
                "compType": 32,
                "compParam": {}
            },
            "defaultValue": "",
            "hideMode": false,
            "useCommand": false,
            "onlyPointTo": false,
            "moduleID": 1,
            "dataStructureID": 1,
            "arrayMode": false,
            "arrayLength": 100,
            "arrayAllowDelete": false,
            "arrayAllowSwap": false,
            "arrayAllowUpdate": false,
            "accessMode": 1,
            "syncMode": 1,
            "attrTips": "自定义碰撞体可能会比较消耗系统性能，请合理使用。\\n当移动者使用了自定义碰撞的情况下，只会与其他的自定义碰撞体发生正确的碰撞。",
            "alias": "\\n★★★ [?]",
            "onlyConfig": false,
            "preview": false,
            "autoTitleWidth": true,
            "titleWidth": 100,
            "eyeShow": true,
            "lockBlock": false,
            "enumEnable_get": true,
            "enumEnable_set": true
        }
    ],
    "attrConditions": [
        [],
        [],
        [],
        [],
        [],
        [],
        [
            {
                "attrID": "184977816669_0.9155437196142784",
                "value": 0,
                "isExpression": false,
                "jsCode": null,
                "tsCode": null,
                "codeName": null
            }
        ],
        [
            {
                "attrID": "184977816669_0.9155437196142784",
                "value": 0,
                "isExpression": false,
                "jsCode": null,
                "tsCode": null,
                "codeName": null
            }
        ],
        [
            {
                "attrID": "184977816669_0.9155437196142784",
                "value": 0,
                "isExpression": false,
                "jsCode": null,
                "tsCode": null,
                "codeName": null
            }
        ],
        [
            {
                "attrID": "184977816669_0.9155437196142784",
                "value": 0,
                "isExpression": false,
                "jsCode": null,
                "tsCode": null,
                "codeName": null
            }
        ],
        [
            {
                "attrID": "184977816669_0.9155437196142784",
                "value": 1,
                "isExpression": false,
                "jsCode": null,
                "tsCode": null,
                "codeName": null
            }
        ],
        [
            {
                "attrID": "184977816669_0.9155437196142784",
                "value": 2,
                "isExpression": false,
                "jsCode": null,
                "tsCode": null,
                "codeName": null
            }
        ],
        []
    ],
    "presetModules": [],
    "serverInstanceClassName": null,
    "clientInstanceClassName": "SoModule_CustomCollision",
    "supportTriggerTypes": [],
    "supportStatusPage": true,
    "hidePublicAttributes": [],
    "editorListPresetData": [],
    "id": 4,
    "editorPreviewTS": "//------------------------------------------------------------------------------------------------------\n//  ■ 用于实现场景对象的实时编辑器预览效果\n//    -- 该代码为私有域，可任意增加变量，该变量作用域仅供此处使用\n//    -- 该代码执行在编辑器中，所以一些游戏运行时独有的函数/类可能无法使用\n//    -- 一旦编写了注册相关的逻辑，需要在onRemoved时取消该注册（如setInterval/os.add_ENTERFRAME等）\n//       如果该模块已附加在了实体对象上，那么请在编写取消注册的逻辑后再保存或确定，否则可能造成泄漏\n//       如果发生不可逆的泄漏，已经影响到了显示和操作，只能在编写正确的代码后通过重启编辑器解决。\n//------------------------------------------------------------------------------------------------------\n/**\n * 当前模块\n */\ndeclare var soModule: SceneObjectModule_4;\n/**\n * 当前模块的拥有者\n */\ndeclare var owner: ProjectClientSceneObject;\n/**\n * 打开对象操作工具（一般在选中时打开）\n * @param sp 目标对象\n */\ndeclare var openOperateObjectTool: (sp: Sprite) => void;\n/**\n * 刷新对象操作工具\n */\ndeclare var refreshOperateObjectTool: () => void;\n/**\n * 移移除对象操作工具\n */\ndeclare var disposeOperateObjectTool: () => void;\n/**\n * 刷新对象模块组件属性\n * @param varName 变量名\n * @param value 更改后的值\n */\ndeclare var updateComp: (varName: string, value: any) => void;\n/**\n * 编辑器预览接口\n */\ndeclare var editor: Editor;\nlet oldAvatarVisible: boolean;\n/**\n * 范围区域\n */\nlet rangeArea: UIBitmap;\n/**\n * 当前模块初始化（当添加该模块时）\n */\nfunction init(): void {\n    if (!rangeArea) {\n        rangeArea = new UIBitmap();\n        rangeArea.graphics.clear();\n        rangeArea.width = soModule.width;\n        rangeArea.height = soModule.height;\n    }\n    oldAvatarVisible = owner.avatarContainer.visible;\n    refreshOperateObjectToolPosition();\n    updateRangeArea();\n    refreshAvatarDsiaplay();\n    drawBaseShape();\n    refreshRangeAreaDisplayLayer();\n}\n/**\n * 当移除该模块时\n * 一些自己增加的逻辑如需销毁，必须在此函数中实现\n */\nfunction onRemoved(): void {\n    if (rangeArea) rangeArea.removeSelf();\n    // 自定义形状\n    onRemoved_customShapeSystem();\n    owner.avatarContainer.visible = oldAvatarVisible;\n}\n/**\n * 当改变当前模块属性时\n * @param attrName 模块的属性名称\n */\nfunction onChange(attrName: string): void {\n    if ([`width`, `height`, `radius`, `type`, `showRange`, `color`, `gridNum`].indexOf(attrName) != -1) {\n        refreshOperateObjectToolPosition();\n        if (soModule.type == 1) {\n            let w = soModule.radius * 2;\n            let h = soModule.radius * 2;\n            soModule.width = w;\n            soModule.height = h;\n            updateComp(\"width\", w);\n            updateComp(\"height\", h);\n        }\n        rangeArea.width = soModule.width;\n        rangeArea.height = soModule.height;\n        updateRangeArea();\n        refreshOperateObjectTool();\n    }\n    if (attrName == \"type\") {\n        refreshOpenOperateObjectToolShow();\n    }\n    if (attrName == \"offsetX\" || attrName == \"offsetY\") {\n        refreshOperateObjectToolPosition();\n        refreshOperateObjectTool();\n    }\n    if (attrName == \"hideAvatar\") {\n        refreshAvatarDsiaplay();\n    }\n    if (attrName == \"opacity\") {\n        rangeArea && (rangeArea.alpha = soModule.opacity);\n    }\n    if (attrName == \"layer\") {\n        refreshRangeAreaDisplayLayer();\n    }\n    // 自定义形状\n    onChange_customShape(attrName);\n}\n/**\n * 当前模块每帧执行的函数\n */\nfunction onUpdate(): void {\n\n}\n/**\n * 当选中拥有者时的函数\n * @param isSingleSelect 是否单选\n */\nfunction onSelectedOwner(isSingleSelect: boolean): void {\n    updateRangeArea();\n    if (soModule.type < 1) openOperateObjectTool(rangeArea);\n    // 自定义形状\n    onSelectedOwner_customShape(isSingleSelect);\n}\n/**\n * 当取消选中拥有者时的函数\n */\nfunction onCancelSelectedOwner(): void {\n    // 自定义形状\n    onCancelSelectedOwner_customShape();\n    drawBaseShape();\n}\n/**\n * 当拥有者的一般属性变更时（包含公共模块的属性变更）\n * @param attrName 拥有者的属性名称\n */\nfunction onOwnerAttributeChange(attrName: string): void {\n    if (attrName == \"name\") {\n        updateRangeArea();\n    }\n    // 自定义形状\n    onOwnerAttributeChange_customShape(attrName);\n}\n/**\n * 当拥有者的模块顺序发生改变时\n * @param fromIndex 模块原位置\n * @param toIndex 模块新位置\n */\nfunction onChangeModulePostion(fromIndex: number, toIndex: number): void {\n\n}\n/**\n * 当对象操作工具开始操作时\n */\nfunction onOperateObjectToolStart() {\n\n}\n/**\n * 当对象操作工具更改宽高时\n */\nfunction onOperateObjectToolChangeWH() {\n    soModule.width = rangeArea.width;\n    soModule.height = rangeArea.height;\n    let radius = Math.floor(Math.min(rangeArea.width / 2, rangeArea.height / 2));\n    updateComp(\"width\", soModule.width);\n    updateComp(\"height\", soModule.height);\n    updateComp(\"radius\", radius)\n    updateRangeArea();\n}\n/**\n * 当对象操作工具操作结束时\n */\nfunction onOperateObjectToolEnd() {\n\n}\n//------------------------------------------------------------------------------------------------------\n//  刷新\n//------------------------------------------------------------------------------------------------------\nfunction refreshRangeAreaDisplayLayer() {\n    if (soModule.layer == 0) {\n        owner.animationLowLayer.addChild(rangeArea);\n    }\n    else {\n        owner.animationHighLayer.addChild(rangeArea);\n    }\n}\nfunction refreshAvatarDsiaplay() {\n    owner.avatarContainer.visible = !soModule.hideAvatar;\n}\nfunction refreshOperateObjectToolPosition() {\n    if (soModule.type == 0) {\n        rangeArea.x = soModule.offsetX;\n        rangeArea.y = soModule.offsetY;\n    }\n    else {\n        rangeArea.x = rangeArea.y = 0;\n    }\n}\n/**\n * 刷新显示区域\n */\nfunction updateRangeArea() {\n    if (!rangeArea) return;\n    rangeArea.graphics.clear();\n    let w = soModule.type == 0 ? soModule.width : soModule.radius;\n    let h = soModule.type == 0 ? soModule.height : soModule.radius;\n    let myRectX = 0;\n    let myRectY = 0;\n    rangeArea.alpha = soModule.opacity;\n    refreshRangeAreaDisplayLayer();\n    if (soModule.type == 0) {\n        rangeArea.graphics.drawRect(myRectX, myRectY, w, h, soModule.color);\n    }\n    else if (soModule.type == 1) {\n        rangeArea.graphics.drawCircle(0, 0, w, soModule.color);\n    }\n    else if (soModule.type == 2) {\n        updateRangeArea_customShapeSystem();\n    }\n}\n/**\n * 刷新操作工具是否显示\n */\nfunction refreshOpenOperateObjectToolShow() {\n    disposeOperateObjectTool();\n    if (soModule.type < 1) openOperateObjectTool(rangeArea);\n}\nfunction drawBaseShape() {\n    if (!soModule.alwaysDisplayColor) {\n        rangeArea && rangeArea.graphics.clear();\n        if (soModule.hideAvatar) {\n            rangeArea && rangeArea.graphics.drawCircle(0, 0, Math.max(Math.floor(Config.SCENE_GRID_SIZE / 2), 16), soModule.color);\n        }\n    }\n}\n//------------------------------------------------------------------------------------------------------\n//  自定义形状\n//------------------------------------------------------------------------------------------------------\nlet cs_pointImgs: UIBitmap[] = [];\nlet cs_drawRoot: UIRoot = new UIRoot();\nlet cs_addImg: UIButton = new UIButton();\nlet cs_shiftKeyDown: boolean;\nlet cs_lockMoveOri: number; //0-无 1-x 2-y\nlet cs_lockMoveSpoint: Point[] = [];\nlet cs_currentPointIndex: number = -1;\nlet cs_recordLength: number = 0;\nlet cs_viewScale: number = 1;\nlet cs_isInit: boolean = false;\nlet cs_scaleChangeEvent: Callback;\nlet cs_savePresetStart: Callback;\nlet cs_savePresetEnd: Callback;\nlet isRelativePoint: boolean = true;\n/**\n * 初始化\n */\nfunction initMove() {\n    cs_isInit = true;\n    cs_drawRoot = new UIRoot();\n    owner.root.addChild(cs_drawRoot);\n    cs_drawRoot.mouseEnabled = false;\n    cs_addImg = new UIButton();\n    cs_addImg.width = 18;\n    cs_addImg.height = 18;\n    cs_addImg.pivotX = 9;\n    cs_addImg.pivotY = 9;\n    cs_addImg.image1 = \"editorAsset/img/plus_1.png\";\n    cs_addImg.image2 = \"editorAsset/img/plus_2.png\";\n    cs_addImg.image3 = \"editorAsset/img/plus_2.png\";\n    cs_addImg.on(EventObject.MOUSE_DOWN, this, onAddClick);\n    cs_viewScale = editor.scene.sceneUIScale;\n    cs_scaleChangeEvent = Callback.New(() => {\n        cs_viewScale = editor.scene.sceneUIScale;\n        let pointindex = cs_currentPointIndex;\n        if (editor.scene.currentSceneObject == owner) {\n            editor.scene.refreshSelectSceneObject();\n            cs_currentPointIndex = pointindex;\n            if (cs_currentPointIndex != -1 && cs_pointImgs[cs_currentPointIndex]) pointType(cs_pointImgs[cs_currentPointIndex], 1);\n        }\n    }, this);\n    cs_savePresetStart = Callback.New(() => {\n        cs_drawRoot.graphics.clear();\n        removeMovePointImg();\n    }, this);\n    cs_savePresetEnd = Callback.New(() => {\n        showMovePointImg();\n    }, this);\n    removeMovePointImg();\n}\n/**\n * 显示轨迹点图片\n */\nfunction showMovePointImg() {\n    let points = soModule.pointArr;\n    cs_drawRoot.graphics.clear();\n    if (!points || points.length == 0) removeMovePointImg();\n    owner.root.addChild(cs_addImg);\n    //刷新加号图片\n    cs_addImg.scaleX = cs_addImg.scaleY = 1 / cs_viewScale;\n    if (!points || points.length == 0) {\n        cs_drawRoot.graphics.drawCircle(0, 0, 8 / cs_viewScale, \"#fec11e\", \"#ffffff\", 2)\n        cs_addImg.pos(0, (15 + (cs_addImg.pivotY)) / cs_viewScale);\n        return;\n    }\n    for (let i = 0; i < points.length; i++) {\n        if (!cs_pointImgs[i]) {\n            cs_pointImgs[i] = new UIBitmap();\n            cs_pointImgs[i].width = 18;\n            cs_pointImgs[i].height = 18;\n            cs_pointImgs[i].pivotX = cs_pointImgs[i].pivotY = 9;\n            pointType(cs_pointImgs[i], 0);\n            owner.root.addChild(cs_pointImgs[i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_DOWN, this, onPointMouseDown, [i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_OVER, this, onPointMouseOver, [i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_OUT, this, onPointMouseOut, [i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_UP, this, onPointMouseUp);\n            cs_pointImgs[i].on(EventObject.DRAG_START, this, onPointDragStart);\n            cs_pointImgs[i].on(EventObject.DRAG_MOVE, this, onPointDragMove, [i]);\n            cs_pointImgs[i].on(EventObject.DRAG_END, this, onPointMouseUp);\n        }\n        cs_pointImgs[i].scaleX = cs_pointImgs[i].scaleY = 1 / cs_viewScale;\n        cs_pointImgs[i].x = isRelativePoint ? points[i].x : points[i].x - owner.x;\n        cs_pointImgs[i].y = isRelativePoint ? points[i].y : points[i].y - owner.y;\n        //划线\n        if (i == 0) {\n            cs_drawRoot.graphics.drawCircle(0, 0, 8 / cs_viewScale, \"#fec11e\", \"#ffffff\", 2)\n            cs_drawRoot.graphics.drawLine(0, 0, cs_pointImgs[i].x, cs_pointImgs[i].y, \"#fec11e\", 2)\n        }\n        else {\n            cs_drawRoot.graphics.drawLine(cs_pointImgs[i - 1].x, cs_pointImgs[i - 1].y, cs_pointImgs[i].x, cs_pointImgs[i].y, \"#fec11e\", 2);\n        }\n    }\n    // 闭合\n    if (points.length >= 2) {\n        cs_drawRoot.graphics.drawLine(cs_pointImgs[points.length - 1].x, cs_pointImgs[points.length - 1].y, 0, 0, \"#fec11e\", 2);\n        updateRangeArea_customShapeSystem();\n    }\n    // \n    if (cs_currentPointIndex != -1 && cs_pointImgs[cs_currentPointIndex]) pointType(cs_pointImgs[cs_currentPointIndex], 1);\n    cs_addImg.pos(cs_pointImgs[points.length - 1].x, cs_pointImgs[points.length - 1].y + (15 + (cs_addImg.pivotY)) / cs_viewScale);\n    if (points.length == cs_pointImgs.length) return;\n    for (let i = cs_pointImgs.length - 1; i > points.length - 1; i--) {\n        removeMovePointImg(i);\n    }\n    // 刷新\n}\n/**\n * 添加事件\n */\nfunction addEvent() {\n    stage.on(EventObject.KEY_DOWN, this, keyDown);\n    stage.on(EventObject.KEY_UP, this, keyUp);\n    stage.on(EventObject.MOUSE_DOWN, this, activaPoint);\n    EventUtils.addEventListener(editor, editor.scene.EVENT_SCENE_SCALE_CHANGE, cs_scaleChangeEvent);\n    EventUtils.addEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_START, cs_savePresetStart);\n    EventUtils.addEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_END, cs_savePresetEnd);\n}\n/**\n * 清理事件\n */\nfunction clearEvent() {\n    stage.off(EventObject.KEY_DOWN, this, keyDown);\n    stage.off(EventObject.KEY_UP, this, keyUp);\n    stage.off(EventObject.MOUSE_DOWN, this, activaPoint);\n    owner.lockKeyMove = owner.lockDelete = false;\n    EventUtils.removeEventListener(editor, editor.scene.EVENT_SCENE_SCALE_CHANGE, cs_scaleChangeEvent);\n    EventUtils.removeEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_START, cs_savePresetStart);\n    EventUtils.removeEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_END, cs_savePresetEnd);\n}\n/**\n * 激活点\n */\nfunction activaPoint() {\n    cs_currentPointIndex = -1;\n    for (let i = 0; i < cs_pointImgs.length; i++) {\n        if (cs_pointImgs[i].hitTestPoint(stage.mouseX, stage.mouseY)) {\n            cs_currentPointIndex = i;\n            pointType(cs_pointImgs[i], 1);\n        } else pointType(cs_pointImgs[i], 0);\n    }\n    owner.lockKeyMove = owner.lockDelete = cs_currentPointIndex != -1;\n}\n/**\n * 点状态\n */\nfunction pointType(pointImg: UIBitmap, type: number) {\n    if (type) {\n        pointImg.graphics.drawRect(0, 0, 18, 18, \"#5990ff\", \"#ffffff\", 1.5);\n    } else pointImg.graphics.drawRect(0, 0, 18, 18, \"#fec11e\", \"#ffffff\", 1.5);\n    pointImg.graphics.drawRect(6, 6, 6, 6, \"#ffffff\");\n}\n/**\n * 移除轨迹点图片\n * @param index 索引，默认-1，即清除所有\n */\nfunction removeMovePointImg(index: number = -1) {\n    if (index == -1) {\n        //移除所有\n        cs_pointImgs.forEach(v => {\n            v.removeSelf();\n            v.dispose();\n        })\n        cs_pointImgs = [];\n        if (cs_addImg) cs_addImg.removeSelf();\n    } else {\n        cs_pointImgs[index].removeSelf();\n        cs_pointImgs[index].dispose();\n        cs_pointImgs.splice(index, 1);\n    }\n}\n/**\n * 鼠标悬浮\n */\nfunction onPointMouseOver(index: number) {\n    if (cs_pointImgs[index]) pointType(cs_pointImgs[index], 1);\n}\n/**\n * 鼠标移出\n */\nfunction onPointMouseOut(index: number) {\n    if (cs_pointImgs[index] && cs_currentPointIndex != index) pointType(cs_pointImgs[index], 0);\n}\n/**\n * 点击轨迹点\n */\nfunction onPointMouseDown(index: number) {\n    owner.lockDrag = true;\n    let pointImg = cs_pointImgs[index];\n    if (!pointImg) return;\n    pointImg.startDrag();\n}\n\n/**\n * 鼠标抬起\n */\nfunction onPointMouseUp() {\n    owner.lockDrag = false;\n}\n\n/**\n * 点击加号\n */\nfunction onAddClick() {\n    let points = soModule.pointArr;\n    points.push(newPoint());\n    editor.scene.recordHistory();\n    updateComp(\"pointArr\", points);\n    showMovePointImg();\n}\n\n/**\n * 新增点位置\n */\nfunction newPoint(index: number = 0): { x: number, y: number } {\n    let points = soModule.pointArr;\n    let pos = points.length == 0 + index ? (isRelativePoint ? { x: 0, y: 0 } : { x: owner.x, y: owner.y }) : { x: points[points.length - 1 - index].x, y: points[points.length - 1 - index].y }\n    let isRight = (isRelativePoint ? owner.x + pos.x : pos.x) > (owner.scene.width / 2);\n    if (isRight) pos.x -= 100;\n    else pos.x += 100;\n    return pos;\n}\n/**\n * 拖拽开始\n */\nfunction onPointDragStart() {\n    editor.scene.recordHistory();\n}\n/**\n * 拖拽移动\n */\nfunction onPointDragMove(index: number) {\n    let pointImg = cs_pointImgs[index];\n    if (!pointImg) return;\n    pointImg.x = owner.customHighLayer.mouseX;\n    pointImg.y = owner.customHighLayer.mouseY;\n    let p2 = index == 0 ? new Point(0, 0) : new Point(cs_pointImgs[index - 1].x, cs_pointImgs[index - 1].y)\n    if (cs_shiftKeyDown) {\n        if (!cs_lockMoveOri) {\n            let lockMoveCheck = new Point(pointImg.x, pointImg.y);\n            if (Point.distance(lockMoveCheck, cs_lockMoveSpoint[index]) > 10) {\n                cs_lockMoveOri = Math.abs(lockMoveCheck.x - cs_lockMoveSpoint[index].x) > Math.abs(lockMoveCheck.y - cs_lockMoveSpoint[index].y) ? 2 : 1;\n            }\n        }\n    }\n    let moveLine = soModule.pointArr;\n    pointImg.x = cs_shiftKeyDown && cs_lockMoveOri == 1 ? p2.x : pointImg.x;\n    moveLine[index].x = Math.floor(isRelativePoint ? pointImg.x : owner.x + pointImg.x);\n    pointImg.y = cs_shiftKeyDown && cs_lockMoveOri == 2 ? p2.y : pointImg.y;\n    moveLine[index].y = Math.floor(isRelativePoint ? pointImg.y : owner.y + pointImg.y);\n    paleLimit();\n    Callback.CallLater(updateComp, this, [\"pointArr\", moveLine]);\n    showMovePointImg();\n}\n\n/**\n * 按键按下\n */\nfunction keyDown(e: EventObject) {\n    if (e.shiftKey && !cs_shiftKeyDown && soModule.pointArr) {\n        cs_shiftKeyDown = true;\n        for (let i = 0; i < soModule.pointArr.length; i++) {\n            cs_lockMoveSpoint[i] = isRelativePoint ? new Point(soModule.pointArr[i].x, soModule.pointArr[i].y) : new Point(soModule.pointArr[i].x - owner.x, soModule.pointArr[i].y - owner.y);\n        }\n    } else if (e.keyCode == Keyboard.DELETE && cs_currentPointIndex != -1) {\n        //删除节点\n        editor.scene.recordHistory();\n        soModule.pointArr.splice(cs_currentPointIndex, 1);\n        updateComp(\"pointArr\", soModule.pointArr);\n        showMovePointImg();\n    } else {\n        let moveLine = soModule.pointArr;\n        let pointImg = cs_pointImgs[cs_currentPointIndex];\n        if (cs_currentPointIndex == -1 || !pointImg) return;\n        let x = pointImg.x;\n        let y = pointImg.y;\n        var d = cs_shiftKeyDown ? Config.SCENE_GRID_SIZE : 1;\n        switch (e.keyCode) {\n            case Keyboard.LEFT:\n                x -= d;\n                break;\n            case Keyboard.RIGHT:\n                x += d;\n                break;\n            case Keyboard.UP:\n                y -= d;\n                break;\n            case Keyboard.DOWN:\n                y += d;\n                break;\n            default:\n                return;\n        }\n        moveLine[cs_currentPointIndex].x = Math.floor(isRelativePoint ? x : owner.x + x);\n        moveLine[cs_currentPointIndex].y = Math.floor(isRelativePoint ? y : owner.y + y);\n        paleLimit();\n        Callback.CallLater(updateComp, this, [\"pointArr\", moveLine]);\n        showMovePointImg();\n    }\n}\n/**\n * 按键抬起\n */\nfunction keyUp(e: EventObject) {\n    if (e.keyCode == Keyboard.SHIFT) {\n        cs_shiftKeyDown = false;\n        cs_lockMoveOri = 0;\n        cs_lockMoveSpoint = [];\n    }\n}\n/**\n * 边界限制\n * @return 是否改变\n */\nfunction paleLimit(): boolean {\n    let isChange: boolean = false;\n    for (let i = 0; i < soModule.pointArr.length; i++) {\n        let m = soModule.pointArr[i];\n        let minX = isRelativePoint ? -owner.x : 0;\n        let minY = isRelativePoint ? -owner.y : 0;\n        let maxX = isRelativePoint ? owner.scene.width - owner.x - 1 : owner.scene.width - 1;\n        let maxY = isRelativePoint ? owner.scene.height - owner.y - 1 : owner.scene.height - 1;\n        let r = { x: m.x, y: m.y }\n        m.x = m.x < minX ? minX : (m.x > maxX ? maxX : m.x);\n        m.y = m.y < minY ? minY : (m.y > maxY ? maxY : m.y)\n        if (r.x != m.x || r.y != m.y) isChange = true;\n    }\n    return isChange;\n}\n//------------------------------------------------------------------------------------------------------\n//  事件-自定义形状\n//------------------------------------------------------------------------------------------------------\nfunction onRemoved_customShapeSystem(): void {\n    if (!cs_isInit) return;\n    cs_isInit = false;\n    removeMovePointImg();\n    cs_drawRoot.dispose();\n    cs_addImg.removeSelf();\n    cs_addImg.dispose();\n    cs_currentPointIndex = -1;\n    clearEvent();\n    cs_lockMoveSpoint = [];\n    cs_scaleChangeEvent = null;\n    cs_savePresetStart = null;\n    cs_savePresetEnd = null;\n}\nfunction onChange_customShape(attrName: string): void {\n    if (soModule.type != 2) {\n        onRemoved_customShapeSystem();\n        return;\n    }\n    if (attrName == \"isRelativePoint\" || attrName == \"pointArr\") {\n        if (attrName == \"pointArr\") {\n            let isChange = false;\n            if (cs_recordLength < soModule.pointArr.length) {\n                let length = soModule.pointArr.length;\n                if (soModule.pointArr[length - 1].x == 0 && soModule.pointArr[length - 1].y == 0) {\n                    let point = newPoint(1);\n                    soModule.pointArr[length - 1].x = point.x;\n                    soModule.pointArr[length - 1].y = point.y;\n                    isChange = true;\n                }\n            }\n            cs_recordLength = soModule.pointArr.length;\n            if (paleLimit() || isChange) {\n                updateComp(\"pointArr\", soModule.pointArr);\n            }\n        }\n        editor.scene.refreshSelectSceneObject();\n    } else if (attrName == \"dynamic\" || attrName == \"autoMove\") {\n        editor.scene.refreshSelectSceneObject();\n    }\n    onSelectedOwner_customShape(true);\n}\nfunction onSelectedOwner_customShape(isSingleSelect: boolean): void {\n    if (soModule.type != 2) return;\n    if (!cs_isInit) initMove();\n    showMovePointImg();\n    cs_recordLength = soModule.pointArr ? soModule.pointArr.length : 0;\n    owner.lockDrag = false;\n    clearEvent();\n    addEvent();\n}\nfunction onCancelSelectedOwner_customShape() {\n    if (soModule.type != 2 || !cs_isInit) return;\n    removeMovePointImg();\n    cs_drawRoot.graphics.clear();\n    cs_currentPointIndex = null;\n    clearEvent();\n}\nfunction onOwnerAttributeChange_customShape(attrName: string) {\n    if (soModule.type != 2 || !cs_isInit) return;\n    if (attrName == \"x\" || attrName == \"y\" && editor.scene.currentSceneObject == owner) showMovePointImg();\n}\nfunction updateRangeArea_customShapeSystem(): void {\n    if (!rangeArea) return;\n    rangeArea.graphics.clear();\n    let points = soModule.pointArr;\n    if (points.length < 3) {\n        rangeArea.graphics.drawCircle(0, 0, Math.max(Math.floor(Config.SCENE_GRID_SIZE / 2), 16), soModule.color);\n    }\n    let graphicsPoints = [0, 0];\n    for (let i = 0; i < points.length; i++) {\n        let point = points[i];\n        graphicsPoints.push(point.x, point.y);\n    }\n    rangeArea.graphics.drawPoly(0, 0, graphicsPoints, soModule.color);\n}",
    "editorPreviewJS": "var oldAvatarVisible;\nvar rangeArea;\nfunction init() {\n    if (!rangeArea) {\n        rangeArea = new UIBitmap();\n        rangeArea.graphics.clear();\n        rangeArea.width = soModule.width;\n        rangeArea.height = soModule.height;\n    }\n    oldAvatarVisible = owner.avatarContainer.visible;\n    refreshOperateObjectToolPosition();\n    updateRangeArea();\n    refreshAvatarDsiaplay();\n    drawBaseShape();\n    refreshRangeAreaDisplayLayer();\n}\nfunction onRemoved() {\n    if (rangeArea)\n        rangeArea.removeSelf();\n    onRemoved_customShapeSystem();\n    owner.avatarContainer.visible = oldAvatarVisible;\n}\nfunction onChange(attrName) {\n    if ([\"width\", \"height\", \"radius\", \"type\", \"showRange\", \"color\", \"gridNum\"].indexOf(attrName) != -1) {\n        refreshOperateObjectToolPosition();\n        if (soModule.type == 1) {\n            var w = soModule.radius * 2;\n            var h = soModule.radius * 2;\n            soModule.width = w;\n            soModule.height = h;\n            updateComp(\"width\", w);\n            updateComp(\"height\", h);\n        }\n        rangeArea.width = soModule.width;\n        rangeArea.height = soModule.height;\n        updateRangeArea();\n        refreshOperateObjectTool();\n    }\n    if (attrName == \"type\") {\n        refreshOpenOperateObjectToolShow();\n    }\n    if (attrName == \"offsetX\" || attrName == \"offsetY\") {\n        refreshOperateObjectToolPosition();\n        refreshOperateObjectTool();\n    }\n    if (attrName == \"hideAvatar\") {\n        refreshAvatarDsiaplay();\n    }\n    if (attrName == \"opacity\") {\n        rangeArea && (rangeArea.alpha = soModule.opacity);\n    }\n    if (attrName == \"layer\") {\n        refreshRangeAreaDisplayLayer();\n    }\n    onChange_customShape(attrName);\n}\nfunction onUpdate() {\n}\nfunction onSelectedOwner(isSingleSelect) {\n    updateRangeArea();\n    if (soModule.type < 1)\n        openOperateObjectTool(rangeArea);\n    onSelectedOwner_customShape(isSingleSelect);\n}\nfunction onCancelSelectedOwner() {\n    onCancelSelectedOwner_customShape();\n    drawBaseShape();\n}\nfunction onOwnerAttributeChange(attrName) {\n    if (attrName == \"name\") {\n        updateRangeArea();\n    }\n    onOwnerAttributeChange_customShape(attrName);\n}\nfunction onChangeModulePostion(fromIndex, toIndex) {\n}\nfunction onOperateObjectToolStart() {\n}\nfunction onOperateObjectToolChangeWH() {\n    soModule.width = rangeArea.width;\n    soModule.height = rangeArea.height;\n    var radius = Math.floor(Math.min(rangeArea.width / 2, rangeArea.height / 2));\n    updateComp(\"width\", soModule.width);\n    updateComp(\"height\", soModule.height);\n    updateComp(\"radius\", radius);\n    updateRangeArea();\n}\nfunction onOperateObjectToolEnd() {\n}\nfunction refreshRangeAreaDisplayLayer() {\n    if (soModule.layer == 0) {\n        owner.animationLowLayer.addChild(rangeArea);\n    }\n    else {\n        owner.animationHighLayer.addChild(rangeArea);\n    }\n}\nfunction refreshAvatarDsiaplay() {\n    owner.avatarContainer.visible = !soModule.hideAvatar;\n}\nfunction refreshOperateObjectToolPosition() {\n    if (soModule.type == 0) {\n        rangeArea.x = soModule.offsetX;\n        rangeArea.y = soModule.offsetY;\n    }\n    else {\n        rangeArea.x = rangeArea.y = 0;\n    }\n}\nfunction updateRangeArea() {\n    if (!rangeArea)\n        return;\n    rangeArea.graphics.clear();\n    var w = soModule.type == 0 ? soModule.width : soModule.radius;\n    var h = soModule.type == 0 ? soModule.height : soModule.radius;\n    var myRectX = 0;\n    var myRectY = 0;\n    rangeArea.alpha = soModule.opacity;\n    refreshRangeAreaDisplayLayer();\n    if (soModule.type == 0) {\n        rangeArea.graphics.drawRect(myRectX, myRectY, w, h, soModule.color);\n    }\n    else if (soModule.type == 1) {\n        rangeArea.graphics.drawCircle(0, 0, w, soModule.color);\n    }\n    else if (soModule.type == 2) {\n        updateRangeArea_customShapeSystem();\n    }\n}\nfunction refreshOpenOperateObjectToolShow() {\n    disposeOperateObjectTool();\n    if (soModule.type < 1)\n        openOperateObjectTool(rangeArea);\n}\nfunction drawBaseShape() {\n    if (!soModule.alwaysDisplayColor) {\n        rangeArea && rangeArea.graphics.clear();\n        if (soModule.hideAvatar) {\n            rangeArea && rangeArea.graphics.drawCircle(0, 0, Math.max(Math.floor(Config.SCENE_GRID_SIZE / 2), 16), soModule.color);\n        }\n    }\n}\nvar cs_pointImgs = [];\nvar cs_drawRoot = new UIRoot();\nvar cs_addImg = new UIButton();\nvar cs_shiftKeyDown;\nvar cs_lockMoveOri;\nvar cs_lockMoveSpoint = [];\nvar cs_currentPointIndex = -1;\nvar cs_recordLength = 0;\nvar cs_viewScale = 1;\nvar cs_isInit = false;\nvar cs_scaleChangeEvent;\nvar cs_savePresetStart;\nvar cs_savePresetEnd;\nvar isRelativePoint = true;\nfunction initMove() {\n    cs_isInit = true;\n    cs_drawRoot = new UIRoot();\n    owner.root.addChild(cs_drawRoot);\n    cs_drawRoot.mouseEnabled = false;\n    cs_addImg = new UIButton();\n    cs_addImg.width = 18;\n    cs_addImg.height = 18;\n    cs_addImg.pivotX = 9;\n    cs_addImg.pivotY = 9;\n    cs_addImg.image1 = \"editorAsset/img/plus_1.png\";\n    cs_addImg.image2 = \"editorAsset/img/plus_2.png\";\n    cs_addImg.image3 = \"editorAsset/img/plus_2.png\";\n    cs_addImg.on(EventObject.MOUSE_DOWN, this, onAddClick);\n    cs_viewScale = editor.scene.sceneUIScale;\n    cs_scaleChangeEvent = Callback.New(function () {\n        cs_viewScale = editor.scene.sceneUIScale;\n        var pointindex = cs_currentPointIndex;\n        if (editor.scene.currentSceneObject == owner) {\n            editor.scene.refreshSelectSceneObject();\n            cs_currentPointIndex = pointindex;\n            if (cs_currentPointIndex != -1 && cs_pointImgs[cs_currentPointIndex])\n                pointType(cs_pointImgs[cs_currentPointIndex], 1);\n        }\n    }, this);\n    cs_savePresetStart = Callback.New(function () {\n        cs_drawRoot.graphics.clear();\n        removeMovePointImg();\n    }, this);\n    cs_savePresetEnd = Callback.New(function () {\n        showMovePointImg();\n    }, this);\n    removeMovePointImg();\n}\nfunction showMovePointImg() {\n    var points = soModule.pointArr;\n    cs_drawRoot.graphics.clear();\n    if (!points || points.length == 0)\n        removeMovePointImg();\n    owner.root.addChild(cs_addImg);\n    cs_addImg.scaleX = cs_addImg.scaleY = 1 / cs_viewScale;\n    if (!points || points.length == 0) {\n        cs_drawRoot.graphics.drawCircle(0, 0, 8 / cs_viewScale, \"#fec11e\", \"#ffffff\", 2);\n        cs_addImg.pos(0, (15 + (cs_addImg.pivotY)) / cs_viewScale);\n        return;\n    }\n    for (var i = 0; i < points.length; i++) {\n        if (!cs_pointImgs[i]) {\n            cs_pointImgs[i] = new UIBitmap();\n            cs_pointImgs[i].width = 18;\n            cs_pointImgs[i].height = 18;\n            cs_pointImgs[i].pivotX = cs_pointImgs[i].pivotY = 9;\n            pointType(cs_pointImgs[i], 0);\n            owner.root.addChild(cs_pointImgs[i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_DOWN, this, onPointMouseDown, [i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_OVER, this, onPointMouseOver, [i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_OUT, this, onPointMouseOut, [i]);\n            cs_pointImgs[i].on(EventObject.MOUSE_UP, this, onPointMouseUp);\n            cs_pointImgs[i].on(EventObject.DRAG_START, this, onPointDragStart);\n            cs_pointImgs[i].on(EventObject.DRAG_MOVE, this, onPointDragMove, [i]);\n            cs_pointImgs[i].on(EventObject.DRAG_END, this, onPointMouseUp);\n        }\n        cs_pointImgs[i].scaleX = cs_pointImgs[i].scaleY = 1 / cs_viewScale;\n        cs_pointImgs[i].x = isRelativePoint ? points[i].x : points[i].x - owner.x;\n        cs_pointImgs[i].y = isRelativePoint ? points[i].y : points[i].y - owner.y;\n        if (i == 0) {\n            cs_drawRoot.graphics.drawCircle(0, 0, 8 / cs_viewScale, \"#fec11e\", \"#ffffff\", 2);\n            cs_drawRoot.graphics.drawLine(0, 0, cs_pointImgs[i].x, cs_pointImgs[i].y, \"#fec11e\", 2);\n        }\n        else {\n            cs_drawRoot.graphics.drawLine(cs_pointImgs[i - 1].x, cs_pointImgs[i - 1].y, cs_pointImgs[i].x, cs_pointImgs[i].y, \"#fec11e\", 2);\n        }\n    }\n    if (points.length >= 2) {\n        cs_drawRoot.graphics.drawLine(cs_pointImgs[points.length - 1].x, cs_pointImgs[points.length - 1].y, 0, 0, \"#fec11e\", 2);\n        updateRangeArea_customShapeSystem();\n    }\n    if (cs_currentPointIndex != -1 && cs_pointImgs[cs_currentPointIndex])\n        pointType(cs_pointImgs[cs_currentPointIndex], 1);\n    cs_addImg.pos(cs_pointImgs[points.length - 1].x, cs_pointImgs[points.length - 1].y + (15 + (cs_addImg.pivotY)) / cs_viewScale);\n    if (points.length == cs_pointImgs.length)\n        return;\n    for (var i = cs_pointImgs.length - 1; i > points.length - 1; i--) {\n        removeMovePointImg(i);\n    }\n}\nfunction addEvent() {\n    stage.on(EventObject.KEY_DOWN, this, keyDown);\n    stage.on(EventObject.KEY_UP, this, keyUp);\n    stage.on(EventObject.MOUSE_DOWN, this, activaPoint);\n    EventUtils.addEventListener(editor, editor.scene.EVENT_SCENE_SCALE_CHANGE, cs_scaleChangeEvent);\n    EventUtils.addEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_START, cs_savePresetStart);\n    EventUtils.addEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_END, cs_savePresetEnd);\n}\nfunction clearEvent() {\n    stage.off(EventObject.KEY_DOWN, this, keyDown);\n    stage.off(EventObject.KEY_UP, this, keyUp);\n    stage.off(EventObject.MOUSE_DOWN, this, activaPoint);\n    owner.lockKeyMove = owner.lockDelete = false;\n    EventUtils.removeEventListener(editor, editor.scene.EVENT_SCENE_SCALE_CHANGE, cs_scaleChangeEvent);\n    EventUtils.removeEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_START, cs_savePresetStart);\n    EventUtils.removeEventListener(editor, editor.scene.EVENT_SAVE_AS_MODEL_PRESET_END, cs_savePresetEnd);\n}\nfunction activaPoint() {\n    cs_currentPointIndex = -1;\n    for (var i = 0; i < cs_pointImgs.length; i++) {\n        if (cs_pointImgs[i].hitTestPoint(stage.mouseX, stage.mouseY)) {\n            cs_currentPointIndex = i;\n            pointType(cs_pointImgs[i], 1);\n        }\n        else\n            pointType(cs_pointImgs[i], 0);\n    }\n    owner.lockKeyMove = owner.lockDelete = cs_currentPointIndex != -1;\n}\nfunction pointType(pointImg, type) {\n    if (type) {\n        pointImg.graphics.drawRect(0, 0, 18, 18, \"#5990ff\", \"#ffffff\", 1.5);\n    }\n    else\n        pointImg.graphics.drawRect(0, 0, 18, 18, \"#fec11e\", \"#ffffff\", 1.5);\n    pointImg.graphics.drawRect(6, 6, 6, 6, \"#ffffff\");\n}\nfunction removeMovePointImg(index) {\n    if (index === void 0) { index = -1; }\n    if (index == -1) {\n        cs_pointImgs.forEach(function (v) {\n            v.removeSelf();\n            v.dispose();\n        });\n        cs_pointImgs = [];\n        if (cs_addImg)\n            cs_addImg.removeSelf();\n    }\n    else {\n        cs_pointImgs[index].removeSelf();\n        cs_pointImgs[index].dispose();\n        cs_pointImgs.splice(index, 1);\n    }\n}\nfunction onPointMouseOver(index) {\n    if (cs_pointImgs[index])\n        pointType(cs_pointImgs[index], 1);\n}\nfunction onPointMouseOut(index) {\n    if (cs_pointImgs[index] && cs_currentPointIndex != index)\n        pointType(cs_pointImgs[index], 0);\n}\nfunction onPointMouseDown(index) {\n    owner.lockDrag = true;\n    var pointImg = cs_pointImgs[index];\n    if (!pointImg)\n        return;\n    pointImg.startDrag();\n}\nfunction onPointMouseUp() {\n    owner.lockDrag = false;\n}\nfunction onAddClick() {\n    var points = soModule.pointArr;\n    points.push(newPoint());\n    editor.scene.recordHistory();\n    updateComp(\"pointArr\", points);\n    showMovePointImg();\n}\nfunction newPoint(index) {\n    if (index === void 0) { index = 0; }\n    var points = soModule.pointArr;\n    var pos = points.length == 0 + index ? (isRelativePoint ? { x: 0, y: 0 } : { x: owner.x, y: owner.y }) : { x: points[points.length - 1 - index].x, y: points[points.length - 1 - index].y };\n    var isRight = (isRelativePoint ? owner.x + pos.x : pos.x) > (owner.scene.width / 2);\n    if (isRight)\n        pos.x -= 100;\n    else\n        pos.x += 100;\n    return pos;\n}\nfunction onPointDragStart() {\n    editor.scene.recordHistory();\n}\nfunction onPointDragMove(index) {\n    var pointImg = cs_pointImgs[index];\n    if (!pointImg)\n        return;\n    pointImg.x = owner.customHighLayer.mouseX;\n    pointImg.y = owner.customHighLayer.mouseY;\n    var p2 = index == 0 ? new Point(0, 0) : new Point(cs_pointImgs[index - 1].x, cs_pointImgs[index - 1].y);\n    if (cs_shiftKeyDown) {\n        if (!cs_lockMoveOri) {\n            var lockMoveCheck = new Point(pointImg.x, pointImg.y);\n            if (Point.distance(lockMoveCheck, cs_lockMoveSpoint[index]) > 10) {\n                cs_lockMoveOri = Math.abs(lockMoveCheck.x - cs_lockMoveSpoint[index].x) > Math.abs(lockMoveCheck.y - cs_lockMoveSpoint[index].y) ? 2 : 1;\n            }\n        }\n    }\n    var moveLine = soModule.pointArr;\n    pointImg.x = cs_shiftKeyDown && cs_lockMoveOri == 1 ? p2.x : pointImg.x;\n    moveLine[index].x = Math.floor(isRelativePoint ? pointImg.x : owner.x + pointImg.x);\n    pointImg.y = cs_shiftKeyDown && cs_lockMoveOri == 2 ? p2.y : pointImg.y;\n    moveLine[index].y = Math.floor(isRelativePoint ? pointImg.y : owner.y + pointImg.y);\n    paleLimit();\n    Callback.CallLater(updateComp, this, [\"pointArr\", moveLine]);\n    showMovePointImg();\n}\nfunction keyDown(e) {\n    if (e.shiftKey && !cs_shiftKeyDown && soModule.pointArr) {\n        cs_shiftKeyDown = true;\n        for (var i = 0; i < soModule.pointArr.length; i++) {\n            cs_lockMoveSpoint[i] = isRelativePoint ? new Point(soModule.pointArr[i].x, soModule.pointArr[i].y) : new Point(soModule.pointArr[i].x - owner.x, soModule.pointArr[i].y - owner.y);\n        }\n    }\n    else if (e.keyCode == Keyboard.DELETE && cs_currentPointIndex != -1) {\n        editor.scene.recordHistory();\n        soModule.pointArr.splice(cs_currentPointIndex, 1);\n        updateComp(\"pointArr\", soModule.pointArr);\n        showMovePointImg();\n    }\n    else {\n        var moveLine = soModule.pointArr;\n        var pointImg = cs_pointImgs[cs_currentPointIndex];\n        if (cs_currentPointIndex == -1 || !pointImg)\n            return;\n        var x = pointImg.x;\n        var y = pointImg.y;\n        var d = cs_shiftKeyDown ? Config.SCENE_GRID_SIZE : 1;\n        switch (e.keyCode) {\n            case Keyboard.LEFT:\n                x -= d;\n                break;\n            case Keyboard.RIGHT:\n                x += d;\n                break;\n            case Keyboard.UP:\n                y -= d;\n                break;\n            case Keyboard.DOWN:\n                y += d;\n                break;\n            default:\n                return;\n        }\n        moveLine[cs_currentPointIndex].x = Math.floor(isRelativePoint ? x : owner.x + x);\n        moveLine[cs_currentPointIndex].y = Math.floor(isRelativePoint ? y : owner.y + y);\n        paleLimit();\n        Callback.CallLater(updateComp, this, [\"pointArr\", moveLine]);\n        showMovePointImg();\n    }\n}\nfunction keyUp(e) {\n    if (e.keyCode == Keyboard.SHIFT) {\n        cs_shiftKeyDown = false;\n        cs_lockMoveOri = 0;\n        cs_lockMoveSpoint = [];\n    }\n}\nfunction paleLimit() {\n    var isChange = false;\n    for (var i = 0; i < soModule.pointArr.length; i++) {\n        var m = soModule.pointArr[i];\n        var minX = isRelativePoint ? -owner.x : 0;\n        var minY = isRelativePoint ? -owner.y : 0;\n        var maxX = isRelativePoint ? owner.scene.width - owner.x - 1 : owner.scene.width - 1;\n        var maxY = isRelativePoint ? owner.scene.height - owner.y - 1 : owner.scene.height - 1;\n        var r = { x: m.x, y: m.y };\n        m.x = m.x < minX ? minX : (m.x > maxX ? maxX : m.x);\n        m.y = m.y < minY ? minY : (m.y > maxY ? maxY : m.y);\n        if (r.x != m.x || r.y != m.y)\n            isChange = true;\n    }\n    return isChange;\n}\nfunction onRemoved_customShapeSystem() {\n    if (!cs_isInit)\n        return;\n    cs_isInit = false;\n    removeMovePointImg();\n    cs_drawRoot.dispose();\n    cs_addImg.removeSelf();\n    cs_addImg.dispose();\n    cs_currentPointIndex = -1;\n    clearEvent();\n    cs_lockMoveSpoint = [];\n    cs_scaleChangeEvent = null;\n    cs_savePresetStart = null;\n    cs_savePresetEnd = null;\n}\nfunction onChange_customShape(attrName) {\n    if (soModule.type != 2) {\n        onRemoved_customShapeSystem();\n        return;\n    }\n    if (attrName == \"isRelativePoint\" || attrName == \"pointArr\") {\n        if (attrName == \"pointArr\") {\n            var isChange = false;\n            if (cs_recordLength < soModule.pointArr.length) {\n                var length = soModule.pointArr.length;\n                if (soModule.pointArr[length - 1].x == 0 && soModule.pointArr[length - 1].y == 0) {\n                    var point = newPoint(1);\n                    soModule.pointArr[length - 1].x = point.x;\n                    soModule.pointArr[length - 1].y = point.y;\n                    isChange = true;\n                }\n            }\n            cs_recordLength = soModule.pointArr.length;\n            if (paleLimit() || isChange) {\n                updateComp(\"pointArr\", soModule.pointArr);\n            }\n        }\n        editor.scene.refreshSelectSceneObject();\n    }\n    else if (attrName == \"dynamic\" || attrName == \"autoMove\") {\n        editor.scene.refreshSelectSceneObject();\n    }\n    onSelectedOwner_customShape(true);\n}\nfunction onSelectedOwner_customShape(isSingleSelect) {\n    if (soModule.type != 2)\n        return;\n    if (!cs_isInit)\n        initMove();\n    showMovePointImg();\n    cs_recordLength = soModule.pointArr ? soModule.pointArr.length : 0;\n    owner.lockDrag = false;\n    clearEvent();\n    addEvent();\n}\nfunction onCancelSelectedOwner_customShape() {\n    if (soModule.type != 2 || !cs_isInit)\n        return;\n    removeMovePointImg();\n    cs_drawRoot.graphics.clear();\n    cs_currentPointIndex = null;\n    clearEvent();\n}\nfunction onOwnerAttributeChange_customShape(attrName) {\n    if (soModule.type != 2 || !cs_isInit)\n        return;\n    if (attrName == \"x\" || attrName == \"y\" && editor.scene.currentSceneObject == owner)\n        showMovePointImg();\n}\nfunction updateRangeArea_customShapeSystem() {\n    if (!rangeArea)\n        return;\n    rangeArea.graphics.clear();\n    var points = soModule.pointArr;\n    if (points.length < 3) {\n        rangeArea.graphics.drawCircle(0, 0, Math.max(Math.floor(Config.SCENE_GRID_SIZE / 2), 16), soModule.color);\n    }\n    var graphicsPoints = [0, 0];\n    for (var i = 0; i < points.length; i++) {\n        var point = points[i];\n        graphicsPoints.push(point.x, point.y);\n    }\n    rangeArea.graphics.drawPoly(0, 0, graphicsPoints, soModule.color);\n}\n"
}